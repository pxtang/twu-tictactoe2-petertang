import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static java.util.Arrays.asList;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.*;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'ptang' at '8/8/15 1:02 PM' with Gradle 2.5
 *
 * @author ptang, @date 8/8/15 1:02 PM
 */
public class BoardTest {

    private static final Integer DEFAULT_LOCATION = 0;
    public static final String DEFAULT_SYMBOL = "X";
    private Board board;
    private List<String> cells;

    @Before
    public void setUp() {
        cells = new ArrayList<>(asList(" "," "," "," "," "," "," "," "," "));
        board = new Board(cells);
    }

    @Test
    public void shouldProduceBoardWhenRequested() {
        assertThat(board.produceBoard(), is(
                "   |   |  \n" +
                "-----------\n" +
                "   |   |  \n" +
                "-----------\n" +
                "   |   |  \n"));

    }

    @Test
    public void shouldMarkLocation0WithXWhenMarked() {
        board.mark(DEFAULT_LOCATION, "X");

        assertThat(cells.get(DEFAULT_LOCATION), is("X"));
    }

    @Test
    public void shouldMarkLocation1WithXWhenMarked() {
        board.mark(1, DEFAULT_SYMBOL);

        assertThat(cells.get(1), is(DEFAULT_SYMBOL));

    }

    @Test
    public void shouldProduceXinLocationWhenLocationMarked() {
        cells.set(DEFAULT_LOCATION, DEFAULT_SYMBOL);

        assertThat(board.produceBoard(), is(
                " X |   |  \n" +
                "-----------\n" +
                "   |   |  \n" +
                "-----------\n" +
                "   |   |  \n"));
    }

    @Test
    public void shouldMarkWithSymbolWhenNonXSymbolUsed() {
        String symbol = "e";
        board.mark(DEFAULT_LOCATION, symbol);

        assertThat(cells.get(DEFAULT_LOCATION), is("e"));

    }

    @Test
    public void shouldBeAbleToMoveIfLocationNotOccupied() {
        assertTrue(board.canMove(DEFAULT_LOCATION));

    }

    @Test
    public void shouldBeUnableToMoveIfLocationOccupied() {
        cells.set(DEFAULT_LOCATION,DEFAULT_SYMBOL);
        assertFalse(board.canMove(DEFAULT_LOCATION));

    }

    @Test
    public void shouldBeDrawWhenBoardFull() {
        for (int i = 0; i < cells.size(); i++) {
             cells.set(i,"e");
        }

        assertTrue(board.checkDraw());

    }

    @Test
    public void shouldWinWhenThreeOfSameInRow() {
        for (int i = 0; i < 3; i++) {
            cells.set(i,DEFAULT_SYMBOL);
        }

        assertTrue(board.checkWin(2));

    }

    @Test
    public void shouldWinWhenThreeOfSameInCol() {
        for (int i = 1; i < 9; i+=3) {
            cells.set(i, DEFAULT_SYMBOL);
        }

        assertTrue(board.checkWin(4));

    }

    @Test
    public void shouldWinWhenDiagThreeOfSame() {
        cells.set(0,DEFAULT_SYMBOL);
        cells.set(4,DEFAULT_SYMBOL);
        cells.set(8,DEFAULT_SYMBOL);

        assertTrue(board.checkWin(0));

    }
}
