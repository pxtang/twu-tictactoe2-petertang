import java.util.List;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'ptang' at '8/8/15 1:02 PM' with Gradle 2.5
 *
 * @author ptang, @date 8/8/15 1:02 PM
 */
public class Board {
    private List<String> cells;

    public Board(List<String> cells) {

        this.cells = cells;
    }


    public String produceBoard() {
        return String.format(
                " %s | %s | %s\n" +
                "-----------\n" +
                " %s | %s | %s\n" +
                "-----------\n" +
                " %s | %s | %s\n",cells.toArray());
    }

    public void mark(Integer location, String symbol) {
        cells.set(location, symbol);
    }

    public boolean canMove(Integer locationToMove) {
        return cells.get(locationToMove).equals(" ");
    }

    public boolean checkDraw() {
        for (String cell : cells) {
            if (cell.equals(" ")) {
                return false;
            }
        }
        return true;
    }

    public boolean checkWin(int moveLocation) {
        if (checkRowWin(moveLocation)) {
            return true;
        }

        if (checkColumnWin(moveLocation)) {
            return true;
        }

        if (checkDiagonals()) {
            return true;
        }

        return false;
    }

    private boolean checkDiagonals() {
        String[] SWDiagValues = {cells.get(0), cells.get(4), cells.get(8)};
        if (!checkForBlanks(SWDiagValues)) {
            return SWDiagValues[0].equals(SWDiagValues[1]) && SWDiagValues[1].equals(SWDiagValues[2]);
        }

        String[] SEDiagValues = {cells.get(2), cells.get(4), cells.get(6)};
        if (!checkForBlanks(SEDiagValues)) {
            return SEDiagValues[0].equals(SEDiagValues[1]) && SEDiagValues[1].equals(SEDiagValues[2]);
        }


        return false;
    }

    private boolean checkColumnWin(int moveLocation) {
        int colNumber = moveLocation % 3;
        String[] colValues = {cells.get(colNumber), cells.get(colNumber+3), cells.get(colNumber+6)};

        return colValues[0].equals(colValues[1]) && colValues[1].equals(colValues[2]);
    }

    private boolean checkRowWin(int moveLocation) {
        int rowNumber = moveLocation / 3;
        int rowStartIndex = rowNumber * 3;
        String[] rowValues = {cells.get(rowStartIndex), cells.get(rowStartIndex+1), cells.get(rowStartIndex+2)};

        return rowValues[0].equals(rowValues[1]) && rowValues[1].equals(rowValues[2]);
    }

    private boolean checkForBlanks(String[] values) {
        for (int i = 0; i < values.length; i++) {
            if (values[i].equals(" ")) return true;

        }
        return false;
    }

}
